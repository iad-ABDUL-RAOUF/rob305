#include "timespec.h"
#include "iostream"

using namespace std;


int main(void)
{
  //test timespec_to_ms
  cout << "test timespec_to_ms" << endl;
  timespec exemple_ts{20, 1234567};
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "millisec: " << timespec_to_ms(exemple_ts) << endl;
  exemple_ts.tv_sec = 20;
  exemple_ts.tv_nsec = 991234567;
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "millisec: " << timespec_to_ms(exemple_ts) << endl;
  exemple_ts.tv_sec = -20;
  exemple_ts.tv_nsec = 1234567;
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "millisec: " << timespec_to_ms(exemple_ts) << endl;
  exemple_ts.tv_sec = -20;
  exemple_ts.tv_nsec = 991234567;
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "millisec: " << timespec_to_ms(exemple_ts) << endl;
  cout << endl;

  cout << "test timespec_from_ms" << endl;
  double exemple_ms = 12987.65;
  exemple_ts = timespec_from_ms(exemple_ms);
  cout << "millisec: " << exemple_ms << endl;
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  exemple_ms = 12387.65;
  exemple_ts = timespec_from_ms(exemple_ms);
  cout << "millisec: " << exemple_ms << endl;
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  exemple_ms = -12987.65;
  exemple_ts = timespec_from_ms(exemple_ms);
  cout << "millisec: " << exemple_ms << endl;
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  exemple_ms = -12387.65;
  exemple_ts = timespec_from_ms(exemple_ms);
  cout << "millisec: " << exemple_ms << endl;
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << endl;
  
  cout << "test timespec_now" << endl;
  timespec now_ts;
  now_ts = timespec_now();
  cout << "sec: " << now_ts.tv_sec << " nanosec:" << now_ts.tv_nsec << endl;
  cout << endl;

  cout << "test timespec_negate" << endl;
  timespec negExemple_ts;
  exemple_ts.tv_sec = 20;
  exemple_ts.tv_nsec = 881234567;
  negExemple_ts = timespec_negate(exemple_ts);
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "negatif : sec: " << negExemple_ts.tv_sec << " nanosec:" << negExemple_ts.tv_nsec << endl;
  exemple_ts.tv_sec = -20;
  exemple_ts.tv_nsec = 881234567;
  negExemple_ts = timespec_negate(exemple_ts);
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "negatif : sec: " << negExemple_ts.tv_sec << " nanosec:" << negExemple_ts.tv_nsec << endl;
  exemple_ts.tv_sec = 20;
  exemple_ts.tv_nsec = 0;
  negExemple_ts = timespec_negate(exemple_ts);
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "negatif : sec: " << negExemple_ts.tv_sec << " nanosec:" << negExemple_ts.tv_nsec << endl;
  exemple_ts.tv_sec = 0;
  exemple_ts.tv_nsec = 881234567;
  negExemple_ts = timespec_negate(exemple_ts);
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "negatif : sec: " << negExemple_ts.tv_sec << " nanosec:" << negExemple_ts.tv_nsec << endl;
  cout << endl;

  cout << "test timespec_add" << endl;
  timespec addExemple;
  timespec exemple1_ts{20, 900000000};
  timespec exemple2_ts{10, 567800000};
  addExemple = timespec_add(exemple1_ts, exemple2_ts);
  addExemple = timespec_add(exemple1_ts, exemple2_ts);
  cout << "n1 sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "add sec: " << addExemple.tv_sec << " nanosec:" << addExemple.tv_nsec << endl;
  exemple1_ts.tv_sec = -20;
  exemple1_ts.tv_nsec = 900000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 567800000;
  addExemple = timespec_add(exemple1_ts, exemple2_ts);
  cout << "n1 sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "add sec: " << addExemple.tv_sec << " nanosec:" << addExemple.tv_nsec << endl;
  exemple1_ts.tv_sec = -20;
  exemple1_ts.tv_nsec = 200000000;
  exemple2_ts.tv_sec = -10;
  exemple2_ts.tv_nsec = 567800000;
  addExemple = timespec_add(exemple1_ts, exemple2_ts);
  cout << "n1 sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "add sec: " << addExemple.tv_sec << " nanosec:" << addExemple.tv_nsec << endl;  
  cout << endl;
  
  
  cout << "test timespec_subtract" << endl;
  timespec subExemple;
  exemple1_ts.tv_sec = 10;
  exemple1_ts.tv_nsec = 1234567;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 1234567;
  subExemple = timespec_subtract(exemple1_ts, exemple2_ts);
  cout << "n1 sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sub sec: " << subExemple.tv_sec << " nanosec:" << subExemple.tv_nsec << endl;
  exemple1_ts.tv_sec = 20;
  exemple1_ts.tv_nsec = 987600000;
  exemple2_ts.tv_sec = -10;
  exemple2_ts.tv_nsec = 500000000;
  subExemple = timespec_subtract(exemple1_ts, exemple2_ts);
  cout << "n1 sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sub sec: " << subExemple.tv_sec << " nanosec:" << subExemple.tv_nsec << endl;
  exemple1_ts.tv_sec = -20;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 967800000;
  subExemple = timespec_subtract(exemple1_ts, exemple2_ts);
  cout << "n1 sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sub sec: " << subExemple.tv_sec << " nanosec:" << subExemple.tv_nsec << endl;
  cout << endl;
  
  cout << "test timespec_wait" << endl;
  exemple_ts.tv_sec = 2;
  exemple_ts.tv_nsec = 991234567;
  timespec remaingTime_ts;
  remaingTime_ts = timespec_wait(exemple_ts);
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "remTime sec: " << remaingTime_ts.tv_sec << " nanosec:" << remaingTime_ts.tv_nsec << endl;
  cout << endl;

  cout << "test operator- unaire" << endl;
  exemple_ts.tv_sec = 5;
  exemple_ts.tv_nsec = 991234567;
  negExemple_ts = -exemple_ts;
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "neg : sec: " << negExemple_ts.tv_sec << " nanosec:" << negExemple_ts.tv_nsec << endl;
  exemple_ts.tv_sec = 0;
  exemple_ts.tv_nsec = 0;
  negExemple_ts = -exemple_ts;
  cout << "sec: " << exemple_ts.tv_sec << " nanosec:" << exemple_ts.tv_nsec << endl;
  cout << "neg : sec: " << negExemple_ts.tv_sec << " nanosec:" << negExemple_ts.tv_nsec << endl;
  cout << endl;

  cout << "test operator+" << endl;
  exemple1_ts.tv_sec = -20;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 967800000;
  timespec exemple3_ts;
  exemple3_ts = exemple1_ts+exemple2_ts;
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "add : sec: " << exemple3_ts.tv_sec << " nanosec:" << exemple3_ts.tv_nsec << endl;
  cout << endl;

  cout << "test operator- binaire" << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 967800000;
  exemple3_ts = exemple1_ts-exemple2_ts;
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sub : sec: " << exemple3_ts.tv_sec << " nanosec:" << exemple3_ts.tv_nsec << endl;
  cout << endl;

  cout << "test operator+=" << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 967800000;
  exemple1_ts += exemple2_ts;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "n1 += n2 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << endl;

  cout << "test operator-=" << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 967800000;
  exemple1_ts -= exemple2_ts;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "n1 -= n2 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << endl;

  cout << "test operator==" << endl;
  bool isequal;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 967800000;
  isequal = (exemple1_ts == exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "equal : "<< isequal << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 100000000;
  isequal = (exemple1_ts == exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "equal : "<< isequal << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 967800000;
  isequal = (exemple1_ts == exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "equal : "<< isequal << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  isequal = (exemple1_ts == exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "equal : "<< isequal << endl;
  cout << endl;



  cout << "test operator!=" << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 967800000;
  bool isnotEqual;
  isnotEqual = (exemple1_ts != exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "notEqual : "<< isnotEqual << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 100000000;
  isnotEqual = (exemple1_ts != exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "notEqual : "<< isnotEqual << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 967800000;
  isnotEqual = (exemple1_ts != exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "notEqual : "<< isnotEqual << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  isnotEqual = (exemple1_ts != exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "notEqual : "<< isnotEqual << endl;
  cout << endl;


  cout << "test operator<" << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 967800000;
  bool isinf;
  isinf = (exemple1_ts < exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "inf : "<< isinf << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 100000000;
  isinf = (exemple1_ts < exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "inf : "<< isinf << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 900000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 100000000;
  isinf = (exemple1_ts < exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "inf : "<< isinf << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 967800000;
  isinf = (exemple1_ts < exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "inf : "<< isinf << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  isinf = (exemple1_ts < exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "inf : "<< isinf << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 900000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  isinf = (exemple1_ts < exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "inf : "<< isinf << endl;
  exemple1_ts.tv_sec = 10;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 967800000;
  isinf = (exemple1_ts < exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "inf : "<< isinf << endl;
  exemple1_ts.tv_sec = 10;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  isinf = (exemple1_ts < exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "inf : "<< isinf << endl;
  exemple1_ts.tv_sec = 10;
  exemple1_ts.tv_nsec = 900000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  isinf = (exemple1_ts < exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "inf : "<< isinf << endl;
  cout << endl;

  cout << "test operator>" << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 967800000;
  bool issup;
  issup = (exemple1_ts > exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sup : "<< issup << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 100000000;
  issup = (exemple1_ts > exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sup : "<< issup << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 900000000;
  exemple2_ts.tv_sec = 10;
  exemple2_ts.tv_nsec = 100000000;
  issup = (exemple1_ts > exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sup : "<< issup << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 967800000;
  issup = (exemple1_ts > exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sup : "<< issup << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  issup = (exemple1_ts > exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sup : "<< issup << endl;
  exemple1_ts.tv_sec = 8;
  exemple1_ts.tv_nsec = 900000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  issup = (exemple1_ts > exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sup : "<< issup << endl;
  exemple1_ts.tv_sec = 10;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 967800000;
  issup = (exemple1_ts > exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sup : "<< issup << endl;
  exemple1_ts.tv_sec = 10;
  exemple1_ts.tv_nsec = 100000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  issup = (exemple1_ts > exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sup : "<< issup << endl;
  exemple1_ts.tv_sec = 10;
  exemple1_ts.tv_nsec = 900000000;
  exemple2_ts.tv_sec = 8;
  exemple2_ts.tv_nsec = 100000000;
  issup = (exemple1_ts > exemple2_ts);
  cout << "n1 : sec: " << exemple1_ts.tv_sec << " nanosec:" << exemple1_ts.tv_nsec << endl;
  cout << "n2 : sec: " << exemple2_ts.tv_sec << " nanosec:" << exemple2_ts.tv_nsec << endl;
  cout << "sup : "<< isequal << endl;
  cout << endl;
  cout << endl;

  return EXIT_SUCCESS;
}